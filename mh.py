# -*- coding: utf-8 -*-
"""Min Hashing with hashes - IR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZIGfyE8KYVeRRAYOA1nkR3vfyRLQXNFI
"""

import re

def text_preprocess(text):
  text = re.sub('[^a-zA-Z0-9 \\\']', ' ', text)
  words = text.split(" ")
  words = [word.lower() for word in words]
  words = list(filter(None,words))
  return words

def get_shingles(words,k):
  shingles = []
  for i in range(0,len(words)-k+1):
    shingles.append((" ").join(words[i:(i+k)]))
  return shingles

def createInputMatrix(dict1,list1, n):
  rows = len(list1)
  inpMatrix = []
  for i in range(rows):
    list2 = []
    for j in range(n):
      x = 0 if dict1[j+1].count(list1[i]) == 0 else 1
      list2.append(x)
    inpMatrix.append(list2)
  print(inpMatrix)
  return inpMatrix

def h1(x):
  return (x+1)%14

def h2(x):
  return (3*x + 1)%14

def createHashvalues(n):
  hashvalues = []
  for i in range(n):
    hashvalues.append([h1(i),h2(i)])
  return hashvalues

from math import inf
def createSignatureMatrix(inputMatrix, hashvalues):
  sigMatrix = []
  r = len(hashvalues[0])
  c = len(inputMatrix[0])
  for i in range(r):
    l1 = [inf for j in range(c)]
    sigMatrix.append(l1)
  print(sigMatrix)
  for i in range(len(inputMatrix)):
    for j in range(c):
      if inputMatrix[i][j] != 0:
        if sigMatrix[0][j] > hashvalues[i][0]:
          sigMatrix[0][j] = hashvalues[i][0]
        if sigMatrix[1][j] > hashvalues[i][1]:
          sigMatrix[1][j] = hashvalues[i][1]
        # There are two if cases here bcoz there are two hash functions. If there are more than two, the if's can be put into a loop

  print(sigMatrix)
  return sigMatrix

def jaccardSimilarity(inputMatrix, signatureMatrix):
  similarityMatrix = {}

  #inputMatrix:
  r1 = len(inputMatrix)
  c1 = len(inputMatrix[0])
  for i in range(c1):
    for j in range(i+1,c1):
      str1 = str(i+1) + ',' + str(j+1)
      s1 = 0
      s2 = 0
      for k in range(r1):
        s1 += 1 if (inputMatrix[k][i]!=0 and inputMatrix[k][j]!=0) else 0
        s2 += 1 if (inputMatrix[k][i]!=0 or inputMatrix[k][j]!=0) else 0
      similarityMatrix[str1] = [s1/s2]

  #signatureMatrix:
  r2 = len(signatureMatrix)
  c2 = len(signatureMatrix[0])
  for i in range(c2):
    for j in range(i+1,c2):
      str1 = str(i+1) + ',' + str(j+1)
      s1 = 0
      s2 = 0
      for k in range(r2):
        s1 += 1 if (signatureMatrix[k][i] == signatureMatrix[k][j]) else 0
        s2 += 1 if (signatureMatrix[k][i]!=0 or signatureMatrix[k][j]!=0) else 0
      similarityMatrix[str1].append(s1/s2)

  print(similarityMatrix)

#Get the documents from the dataset
with open('dataset.txt', 'r') as f:
  lines = f.readlines()

#Pre Process the documents to remove punctuations and get words from the documents
dict1 = {}
i = 1
for line in lines:
  dict1[i] = text_preprocess(line)
  i = i+1

#Make shingles out of the words in the documents, shingling factor k is taken as 2 here
for key in dict1:
  dict1[key] = get_shingles(dict1[key],2)
print(dict1)

#Get all the shingles into a single list
list1 = []
for x in dict1.values():
  list1.extend(x)
list1 = list(set(list1))

#Create the input Matrix of 0's and 1's - If the shingle is present in the doc => 1 else 0
#Columns represent the docs and rows represent each shingle
inpMatrix = createInputMatrix(dict1,list1,3)

#Generate hashvalues
hashvalues = createHashvalues(len(inpMatrix))
print(hashvalues)

#Find the Signature Matrix
sigMatrix = createSignatureMatrix(inpMatrix,hashvalues)

#Find the similarity between documents with original input matrix and signature matrix
jaccardSimilarity(inpMatrix,sigMatrix)

